{
    "collab_server" : "",
    "contents" : "#Needed libraries\nlibrary(shiny)\nlibrary(DLMtool)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(reshape2)\n#Source code to load DLMtool objects\n\nsource('load_DLM.r',local = FALSE)\n#source(\"D:/JMC/Documents/GitHub/DLmethods tools/Shiny_DLMtool/load_DLM.r\")\n#load.dlm.stuff<-function() {for(i in 1:length(DLMdat))assign(DLMdat[[i]]@Name,DLMdat[[i]])}\n#for(i in 1:length(DLMdat))assign(DLMdat[[i]]@Name,DLMdat[[i]])\n\n#START SHINY SERVER\nshinyServer(function(input, output,session) {\n\n#################  \n### Functions ###\n#################\n  vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)\n  \n  VBGF<-function(Linf,k,t0,ages)\n  {\n    Lengths_exp<-Linf*(1-exp(-k*(ages-t0)))\n    return(Lengths_exp)\n  }\n  \n  VBGF.age<-function(Linf,k,t0,lt)\n  {\n    ages<-t0-(log(1-(lt/Linf))/k)\n    return(ages)\n  }\n    \n  LtWt.fit<-function(p,Lts,Ob.wts,return.type=2)\n  { \n    if(return.type==1)\n    {\n      exp.wts<-p[1]*(Lts)^p[2]\n      return(exp.wts)\n    }\n    if(return.type==2)\n    {\n      exp.wts<-p[1]*(Lts)^p[2]\n      ssq.wts<-sum((exp.wts-Ob.wts)^2)\n      return(ssq.wts)\n    }    \n  }\n  \n  Mat.fit<-function(p,Lts,Ob.mat,return.type=2)\n  {  \n    if(return.type==1)\n    {\n      exp.mat<-1/(1+exp(p[1]*(Lts-p[2])))\n      return(exp.mat)\n    }\n    if(return.type==2)\n    {\n      exp.mat<-1/(1+exp(p[1]*(Lts-p[2])))\n      ssq.matr<-sum((exp.mat-Ob.mat)^2)\n      return(ssq.matr)\n    }    \n  }\n  \n  Sel.fit<-function(p,met.vec,Ob.sel,return.type=2)\n  {\n    if(return.type==1)\n    {\n      Exp.sel<-1/(1+exp(-log(19)*(met.vec-p[1])/p[2]))\n      return(Exp.sel)\n    }\n    if(return.type==2)\n    {\n      Exp.sel<-1/(1+exp(-log(19)*(met.vec-p[1])/p[2]))\n      ssq.sel<-sum((Exp.sel-Ob.sel)^2)\n      return(ssq.sel)\n    }\n  }\n\n  #Read data file\n#  datafile<-reactive({\n#    inFile <- input$file1\n#    if (is.null(inFile)) return(NULL)\n#    if(is.null(inFile)==\"FALSE\"){\n#      dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n#      return(dlm_input)\n#    }\n#    })\n############################\n### End function section ###\n############################\n\n  dlmstuff<-reactive({load.dlm.stuff()})\n  #Start plots  \n  output$Catchplot <- renderPlot({    \n    inFile <- input$file1\n  if (is.null(inFile)) return(NULL)\n#  \n  dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n  if(all(is.na(dlm_input@Cat))==\"FALSE\")\n  {\n    dlm_input.df<-data.frame(t(rbind(dlm_input@Year,dlm_input@Cat,dlm_input@Cat-(dlm_input@Cat*dlm_input@CV_Cat),dlm_input@Cat+(dlm_input@Cat*dlm_input@CV_Cat))))\n    colnames(dlm_input.df)<-c(\"Year\",\"Catch\",\"lower\",\"upper\")\n    ct.plot<-ggplot(dlm_input.df,aes(Year,Catch))+theme(axis.title = element_text(size=14))+geom_line(lwd=1)+geom_errorbar(aes(ymax = upper, ymin = lower),color=\"darkblue\",width=0)+ggtitle(\"Removal history\")+theme(plot.title = element_text(lineheight=.8,size=18, face=\"bold\"))\n    print(ct.plot)\n  }\n })\n  \n  output$Indexplot <- renderPlot({    \n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n    if(all(is.na(dlm_input@Ind))==\"FALSE\")\n      {\n        dlm_input.df<-data.frame(t(rbind(dlm_input@Year,dlm_input@Ind,dlm_input@Ind-(dlm_input@Ind*dlm_input@CV_Ind),dlm_input@Ind+(dlm_input@Ind*dlm_input@CV_Ind))))\n        colnames(dlm_input.df)<-c(\"Year\",\"Index\",\"lower\",\"upper\")\n        index.plot<-ggplot(dlm_input.df,aes(Year,Index))+theme(axis.title = element_text(size=14))+geom_line(lwd=1,color=\"black\")+geom_errorbar(aes(ymax = upper, ymin = lower),color=\"brown\",width=0)+ggtitle(\"Index time series\")+theme(plot.title = element_text(lineheight=.8,size=18, face=\"bold\"))\n        print(index.plot)\n      }\n    })\n\n  output$LHplots <- renderPlot({    \n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n   \n    #VBGF\n   if(any(is.na(c(dlm_input@vbLinf,dlm_input@vbK,dlm_input@vbt0)))==\"FALSE\")\n    {\n      dlm_input.vbgf<-data.frame(Age=c(0:dlm_input@MaxAge),Length=VBGF(dlm_input@vbLinf,dlm_input@vbK,dlm_input@vbt0,c(0:dlm_input@MaxAge)))\n      dlm_input.vbgf.plot<-ggplot(dlm_input.vbgf,aes(Age,Length))+geom_line(lwd=2)+theme(axis.title = element_text(size=14))+\n      annotate(\"text\",x=0.9*max(dlm_input.vbgf$Age),y=c(0.25*max(dlm_input.vbgf$Length),0.15*max(dlm_input.vbgf$Length),0.05*max(dlm_input.vbgf$Length)),label=c(paste0(\"Linf=\",round(dlm_input@vbLinf,2)),paste0(\"k=\",round(dlm_input@vbK,2)),paste0(\"t0=\",round(dlm_input@vbt0,2))),ymin=0,size=5)\n      if(any(is.na(c(dlm_input@L50,dlm_input@L95)))==\"FALSE\")\n       {\n        age.mat<-data.frame(Age=VBGF.age(dlm_input@vbLinf,dlm_input@vbK,dlm_input@vbt0,c(dlm_input@L50,dlm_input@L95)),Length=c(dlm_input@L50,dlm_input@L95),Label=c(\"Lmat50%\",\"Lmat95%\"))\n        #print(age.mat)\n        dlm_input.vbgf.plot<-dlm_input.vbgf.plot+geom_point(data=age.mat,aes(Age,Length), color = \"darkorange\",size=6) +geom_text(data=age.mat,label=c(\"Lmat50%\",\"Lmat95%\"),nudge_x = 0.15*max(dlm_input.vbgf$Age))\n       # dlm_input.vbgf.plot<-dlm_input.vbgf.plot+geom_text(aes(Age,length),data=age.mat,label=c(\"L50%\",\"L95%\")) \n       }\n   }\n    if(any(is.na(c(dlm_input@vbLinf,dlm_input@vbK,dlm_input@vbt0)))==\"TRUE\")\n    {\n        df <- data.frame()\n        dlm_input.vbgf.plot<- ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n        theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n        theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n        annotate(\"text\",x=0,y=0,label=\"VBGF not available\",size=5)\n    }\n    \n    #Length-weight\n    if(any(is.na(c(dlm_input@wla,dlm_input@wlb)))==\"FALSE\")\n    {\n      max.lt<-max(dlm_input@L95,dlm_input@vbLinf,na.rm = TRUE)\n      if(max.lt== -Inf){max.lt<-100}\n      dlm_input.lw<-data.frame(cbind(c(0:max.lt),LtWt.fit(c(dlm_input@wla,dlm_input@wlb),c(0:max.lt),return.type=1)))\n      colnames(dlm_input.lw)<-c(\"Length\",\"Weight\")\n      dlm_input.lw.plot<-ggplot(dlm_input.lw,aes(Length,Weight))+geom_line(lwd=2)+theme(axis.title = element_text(size=14))+\n      annotate(\"text\",x=0.9*max(dlm_input.lw$Length),y=c(0.25*max(dlm_input.lw$Weight),0.15*max(dlm_input.lw$Weight)),label=c(paste0(\"a=\",round(dlm_input@wla,5)),paste0(\"b=\",round(dlm_input@wlb,2))),xmin=0,ymin=0,size=5)\n#      print(dlm_input.lw.plot)\n    }\n    if(any(is.na(c(dlm_input@wla,dlm_input@wlb)))==\"TRUE\")\n    {\n      df <- data.frame()\n      dlm_input.lw.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n      theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n      theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n      annotate(\"text\",x=0,y=0,label=\"Lt-Wt not available\",size=5)\n    }\n    \n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(1, 2)))\n    print(dlm_input.vbgf.plot, vp = vplayout(1, 1))\n    print(dlm_input.lw.plot, vp = vplayout(1, 2))\n  })\n\n  output$Parameterplots <- renderPlot({    \n      inFile <- input$file1\n      if (is.null(inFile)) return(NULL)\n      dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n      dlm_parameters.df<-data.frame(Parameters=c(dlm_input@AvC,dlm_input@Dt,dlm_input@Mort,dlm_input@FMSY_M,dlm_input@BMSY_B0,dlm_input@Dep,dlm_input@Abun,dlm_input@steep),CV=c(dlm_input@CV_AvC,dlm_input@CV_Dt,dlm_input@CV_Mort,dlm_input@CV_FMSY_M,dlm_input@BMSY_B0,dlm_input@CV_Dep,dlm_input@CV_Abun,dlm_input@CV_steep))\n      draws<-50000\n      #Average catch distribution\n      if(any(is.na(dlm_parameters.df[1,]))==FALSE)\n      {\n        AvC.dist<-data.frame(AvC=rnorm(draws,dlm_parameters.df[1,1],dlm_parameters.df[1,1]*dlm_parameters.df[1,2]))\n        AvC.plot<-ggplot(AvC.dist,aes(AvC))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[1,])))\n      {\n        df <- data.frame()\n        AvC.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"Average Catch NA\",size=5)\n      }\n      #Depletion over time distribution\n      if(any(is.na(dlm_parameters.df[2,]))==FALSE)\n      {\n        DepT.dist<-data.frame(DepT=rnorm(draws,dlm_parameters.df[2,1],dlm_parameters.df[2,1]*dlm_parameters.df[2,2]))\n        DepT.plot<-ggplot(DepT.dist,aes(DepT))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[2,])))\n      {\n        df <- data.frame()\n        DepT.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"Bnow/Bthen NA\",size=5)\n      }\n      #Natural mortality distribution\n      if(any(is.na(dlm_parameters.df[3,]))==FALSE)\n      {\n        M.dist<-data.frame(M=rnorm(draws,dlm_parameters.df[3,1],dlm_parameters.df[3,1]*dlm_parameters.df[3,2]))\n        M.plot<-ggplot(M.dist,aes(M))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[3,])))\n      {\n        df <- data.frame()\n        M.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"Natural mortality NA\",size=5)\n      }\n      #FMSY/M distribution\n      if(any(is.na(dlm_parameters.df[4,]))==FALSE)\n      {\n        FMSY_M.dist<-data.frame(FMSY_M=rnorm(draws,dlm_parameters.df[4,1],dlm_parameters.df[4,1]*dlm_parameters.df[4,2]))\n        FMSY_M.plot<-ggplot(FMSY_M.dist,aes(FMSY_M))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[4,])))\n      {\n        df <- data.frame()\n        FMSY_M.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"FMSY/M NA\",size=5)\n      }\n      #BMSY/B0 distribution\n      if(any(is.na(dlm_parameters.df[5,]))==FALSE)\n      {\n        BMSY_B0.dist<-data.frame(BMSY_B0=rnorm(draws,dlm_parameters.df[5,1],dlm_parameters.df[5,1]*dlm_parameters.df[5,2]))\n        BMSY_B0.plot<-ggplot(BMSY_B0.dist,aes(BMSY_B0))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[5,])))\n      {\n        df <- data.frame()\n        BMSY_B0.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"BMSY/B0 NA\",size=5)\n      }\n      #Depletion distribution\n      if(any(is.na(dlm_parameters.df[6,]))==FALSE)\n      {\n        Dep.dist<-data.frame(Dep=rnorm(draws,dlm_parameters.df[6,1],dlm_parameters.df[6,1]*dlm_parameters.df[6,2]))\n        Dep.plot<-ggplot(Dep.dist,aes(Dep))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[6,])))\n      {\n        df <- data.frame()\n        Dep.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"Depletion NA\",size=5)\n      }\n      #Current abundance distribution\n      if(any(is.na(dlm_parameters.df[7,]))==FALSE)\n      {\n        Abund.dist<-data.frame(Abund=rnorm(draws,dlm_parameters.df[7,1],dlm_parameters.df[7,1]*dlm_parameters.df[7,2]))\n        Abund.plot<-ggplot(Abund.dist,aes(Abund))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[7,])))\n      {\n        df <- data.frame()\n        Abund.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"Current abundance NA\",size=5)\n      }\n      #Steepness distribution\n      if(any(is.na(dlm_parameters.df[8,]))==FALSE)\n      {\n        h.dist<-data.frame(h=rnorm(draws,dlm_parameters.df[8,1],dlm_parameters.df[8,1]*dlm_parameters.df[8,2]))\n        h.plot<-ggplot(h.dist,aes(h))+geom_density()\n      }\n      if(any(is.na(dlm_parameters.df[8,])))\n      {\n        df <- data.frame()\n        h.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n          theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n          theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n          annotate(\"text\",x=0,y=0,label=\"Steepness NA\",size=5)\n      }\n      \n      \n      grid.newpage()\n      pushViewport(viewport(layout = grid.layout(4, 2)))\n      print(AvC.plot, vp = vplayout(1, 1))\n      print(DepT.plot, vp = vplayout(1, 2))\n      print(M.plot, vp = vplayout(2, 1))\n      print(FMSY_M.plot, vp = vplayout(2, 2))\n      print(BMSY_B0.plot, vp = vplayout(3, 1))\n      print(Dep.plot, vp = vplayout(3, 2))\n      print(Abund.plot, vp = vplayout(4, 1))\n      print(h.plot, vp = vplayout(4, 2))\n      \n    })\n  \n  #Get output control methods that work with data set\n  \n  canlist<-reactive({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n    canlist<-as.list(Can(dlm_input))\n  })\n \n  cantlist<-reactive({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n    cantlist<-Cant(dlm_input)\n  })\n  \n  \n   output$choicelist<-renderUI({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    #print(canlist())\n    output.canlist<-canlist()[canlist() %in% avail(\"DLM_output\")]\n    checkboxGroupInput(\"checkGroup\",\"Available data-limited output control methods\",output.canlist)\n  })\n\n  observe({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    output.canlist<-canlist()[canlist() %in% avail(\"DLM_output\")]\n    if(input$selectall == 0) return(NULL) \n    else if (input$selectall%%2 == 0)\n    {\n      updateCheckboxGroupInput(session,\"checkGroup\",\"Available data-limited output control methods\", output.canlist)\n    }\n    else\n    {\n      updateCheckboxGroupInput(session,\"checkGroup\",\"Available data-limited output control methods\",choices= output.canlist,selected= output.canlist)\n    }\n  })\n\n  #Sensitivity options\n  output$sensilist<-renderUI({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    output.canlist<-canlist()[canlist() %in% avail(\"DLM_output\")]\n    radioButtons(\"radio\",\"Choose data-limited output control method to explore sensitivity\",output.canlist)\n  })\n\n  #Get input control methods that work with data set\n  #output$inctl.choices<-reactive({exists(\"input$file1\")})\n  \n#  output$inctl.choicelist<-renderUI({\n#    inFile <- input$file1\n#    if (is.null(inFile)) return(NULL)\n#    input.canlist<-canlist()[canlist() %in% avail(\"DLM_input\")]\n#    checkboxGroupInput(\"checkGroup\",\"Available data-limited input control methods\",input.canlist)\n#  })\n  \n#  observe({\n#    inFile <- input$file1\n#    if (is.null(inFile)) return(NULL)\n#    input.canlist<-canlist()[canlist() %in% avail(\"DLM_input\")]\n#    if(input$selectall2 == 0) return(NULL) \n#   else if (input$selectall2%%2 == 0)\n#    {\n#      updateCheckboxGroupInput(session,\"checkGroup\",\"Available data-limited input control methods\", input.canlist)\n#    }\n#    else\n#    {\n#      updateCheckboxGroupInput(session,\"checkGroup\",\"Available data-limited input control methods\",choices= input.canlist,selected= output.canlist)\n#    }\n#  })\n \n  #output the DL methods that are not available  \n  output$MP_NA<-renderPrint({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    else{\n      dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n      cant.table<-data.frame(cbind(cantlist(),Needed(dlm_input)))\n      colnames(cant.table)<-c(\"Method\",\"Reason\",\"Needed\")\n      return(cant.table)\n    }\n  })\n  \n  \n    \n  #Run TAC and plot results\n  run.check<-eventReactive(input$run_dlm,{length(input$checkGroup)})\n  \n  TAC.out<-reactive({\n    if(run.check()>0){\n      inFile <- input$file1\n      if (is.null(inFile)) return(NULL)\n      dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n      TAC.out<-TAC(dlm_input,MPs=input$checkGroup)@TAC[,,1]\n      return(TAC.out)\n    }\n  })\n\n    output$TACplots<- renderPlot({    \n     inFile <- input$file1\n      if (is.null(inFile)) return(NULL)\n      dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n      if(run.check()>0){\n      TAC.out<-TAC.out()\n      TAC.df<-data.frame(t(TAC.out))\n        #      TAC.df<-data.frame(t(TAC(dlm_input,MPs=input$checkGroup)@TAC[,,1]))\n      #TAC.df<-data.frame(t(dlm_input_TAC@TAC[,,1]))\n      if(length(input$checkGroup)==1){\n        TAC.df.melt<-melt(TAC.df)\n        TAC.df.melt[,1]<-input$checkGroup\n        TAC.plot<-ggplot(data=TAC.df.melt,aes(as.factor(variable),value))+geom_boxplot()+ coord_flip()+labs(x=\"DL Method\",y=\"TAC\")\n        }\n      if(length(input$checkGroup)>1){\n        colnames(TAC.df)<-input$checkGroup\n        TAC.df.melt<-melt(TAC.df)\n        TAC.plot<-ggplot(data=TAC.df.melt,aes(as.factor(variable),value))+geom_boxplot()+ coord_flip()+labs(x=\"DL Method\",y=\"TAC\")\n        }\n      print(TAC.plot)\n      output$downloadTAC <- downloadHandler(\n        filename = function() { paste(\"TAC\",Sys.time(), '.csv', sep='') },\n        content = function(file) {write.csv(TAC.df, file)}) \n      output$downloadTACobj <- downloadHandler(\n        filename = function() {  paste0(\"TAC\",Sys.time(),\".DMP\", sep='') },\n        content = function(file) {save(TAC.out,file=file)}) \n      }\n    })\n  \n  output$wtedTAC<- renderPlot({    \n    Tac.density<-density(na.omit(c(TAC.out())))\n    plot(Tac.density,lwd=2.5,xlab=\"TAC\",main=\"TAC distirbution (equally weighted among methods)\")\n    })\n\n  output$Sensiplot<-renderPlot({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n    TAC.out<-TAC(dlm_input,MPs=input$radio)\n    dlm_TAC_sensi<-Sense(TAC.out,input$radio)\n    output$downloadSensi <- downloadHandler(\n      filename = function() { paste('Sensi',input$radio, '.png', sep='') },\n      content = function(file) {\n        png(file, type='cairo')\n        Sense(TAC.out,input$radio)\n        dev.off()},contentType = 'image/png') \n    })\n  \n#######################\n######## MSE ##########\n#######################\n  \n#    output$full.choicelist<-renderUI({\n#    inFile <- input$file1\n#    if (is.null(inFile)) return(NULL)\n#    input.canlist<-canlist()\n#    checkboxGroupInput(\"checkGroup\",\"Available methods with control rules\",input.canlist)\n#  })\n\n  #ID output control rules\n  output$can.list.output<-renderUI({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    canlist.output<-canlist()[canlist() %in% avail(\"DLM_output\")]\n    checkboxGroupInput(\"checkGroup\",\"Available output methods\",canlist.output)\n  })\n  \n  \n  observe({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    canlist.output<-canlist()[canlist() %in% avail(\"DLM_output\")]\n    if(input$allselect == 0) return(NULL) \n    else if (input$allselect%%2 == 0)\n    {\n      updateCheckboxGroupInput(session,\"checkGroup\",\"Available output methods\", canlist.output)\n    }\n    else\n    {\n      updateCheckboxGroupInput(session,\"checkGroup\",\"Available output methods\",choices= canlist.output,selected= canlist.output)\n    }\n  })\n \n  #ID input control rules\n  output$can.list.input<-renderUI({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    canlist.input<-canlist()[canlist() %in% avail(\"DLM_input\")]\n    checkboxGroupInput(\"checkGroup2\",\"Available input methods\",canlist.input)\n  })\n  \n  \n  observe({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    canlist.input<-canlist()[canlist() %in% avail(\"DLM_input\")]\n    if(input$selectinput == 0) return(NULL) \n    else if (input$selectinput%%2 == 0)\n    {\n      updateCheckboxGroupInput(session,\"checkGroup2\",\"Available input methods\", canlist.input)\n    }\n    else\n    {\n      updateCheckboxGroupInput(session,\"checkGroup2\",\"Available input methods\",choices= canlist.input,selected= canlist.input)\n    }\n  })\n \n  \n  #ID unavailable output control rules\n   output$cant.list.output<-renderUI({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    cantlist.output<-cantlist()[cantlist() %in% avail(\"DLM_output\")]\n    checkboxGroupInput(\"checkGroupNAout\",\"Unavailable output methods\",cantlist.output)\n   })\n  \n  \n  observe({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    cantlist.output<-cantlist()[cantlist() %in% avail(\"DLM_output\")]\n    if(input$allselectNAop == 0) return(NULL) \n    else if (input$allselectNAop%%2 == 0)\n    {\n      updateCheckboxGroupInput(session,\"checkGroupNAout\",\"Unavailable output methods\", cantlist.output)\n    }\n    else\n    {\n      updateCheckboxGroupInput(session,\"checkGroupNAout\",\"Unavailable output methods\",choices= cantlist.output,selected= cantlist.output)\n    }\n  })\n  \n  #ID input control rules\n  output$cant.list.input<-renderUI({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    cantlist.input<-cantlist()[cantlist() %in% avail(\"DLM_input\")]\n    checkboxGroupInput(\"checkGroupNAin\",\"Unavailable input methods\",cantlist.input)\n  })\n  \n  \n  observe({\n    inFile <- input$file1\n    if (is.null(inFile)) return(NULL)\n    cantlist.input<-cantlist()[cantlist() %in% avail(\"DLM_input\")]\n    if(input$allselectNAip == 0) return(NULL) \n    else if (input$allselectNAip%%2 == 0)\n    {\n      updateCheckboxGroupInput(session,\"checkGroupNAin\",\"Unvailable input methods\", cantlist.input)\n    }\n    else\n    {\n      updateCheckboxGroupInput(session,\"checkGroupNAin\",\"Unavailable input methods\",choices= cantlist.input,selected= cantlist.input)\n    }\n  })\n  \n  \n  #Stock inputs\n  output$stock.choicelist<-renderUI({\n    if (is.null(avail(\"Stock\"))) return(NULL) \n    else {Stocks <- avail(\"Stock\")\n    selectInput(\"stock\",\"Choose Stock type\",as.list(Stocks),selected = Stocks[1])}\n  })\n  \n  observeEvent(input$stock, {output$stock.maxage<-renderUI({\n    numericInput(\"maxage\",\"max. age\",value=get(input$stock)@maxage,min=1, max=300, step=1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.M<-renderUI({\n    sliderInput(\"M\",\"M\",min=0, max=2, value=get(input$stock)@M,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Msd<-renderUI({\n    sliderInput(\"Msd\",\"SD of M\",min=0, max=2, value=get(input$stock)@Msd,step =0.1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Mgrad<-renderUI({\n    sliderInput(\"Mgrad\",\"M gradient\",min=-2, max=2, value=get(input$stock)@Mgrad,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Linf<-renderUI({\n    sliderInput(\"Linf\",\"Linf\",min=0, max=1500, value=get(input$stock)@Linf,step =1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Linfsd<-renderUI({\n    sliderInput(\"Linfsd\",\"SD of Linf\",min=0, max=2, value=get(input$stock)@Linfsd,step =0.001)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Linfgrad<-renderUI({\n    sliderInput(\"Linfgrad\",\"Linf gradient\",min=-2, max=2, value=get(input$stock)@Linfgrad,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.K<-renderUI({\n    sliderInput(\"K\",\"K\",min=0, max=2, value=get(input$stock)@K,step =0.001)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Ksd<-renderUI({\n    sliderInput(\"Ksd\",\"SD of K\",min=0, max=2, value=get(input$stock)@Ksd,step =0.001)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Kgrad<-renderUI({\n    sliderInput(\"Kgrad\",\"K gradient\",min=-2, max=2, value=get(input$stock)@Kgrad,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.t0<-renderUI({\n    sliderInput(\"t0\",\"t0\",min=-10, max=10, value=get(input$stock)@t0,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.WtLt_a<-renderUI({\n    numericInput(\"WtLt_a\",\"W-L a\",value=get(input$stock)@a,min=0, max=1, step=0.0000001)\n    })\n  })\n  observeEvent(input$stock, {output$stock.WtLt_b<-renderUI({\n    numericInput(\"WtLt_b\",\"W-L b\",value=get(input$stock)@b,min=2, max=4, step=0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.R0<-renderUI({\n    numericInput(\"R0\",\"Initial recruitment\",value=get(input$stock)@R0,min=0, max=1000000, step=10)\n    })\n  })\n  observeEvent(input$stock, {output$stock.SRrel<-renderUI({\n    numericInput(\"SRrel\",\"SR: BH=1; Ricker=2\",value=get(input$stock)@SRrel,min=1, max=2, step=1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.h<-renderUI({\n    sliderInput(\"h\",\"Steepness\",min=0.2, max=1, value=get(input$stock)@h,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.recgrad<-renderUI({\n    sliderInput(\"recgrad\",\"Rec. gradient\",min=-10, max=10, value=get(input$stock)@recgrad,step =0.1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Perr<-renderUI({\n    sliderInput(\"Perr\",\"Rec. dev. error\",min=0, max=2, value=get(input$stock)@Perr,step =0.1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.AC<-renderUI({\n    sliderInput(\"AC\",\"Rec. autocorrelation\",min=0, max=1, value=get(input$stock)@AC,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.L50<-renderUI({\n    sliderInput(\"L50\",\"Length at 50% maturity\",min=0, max=1000, value=get(input$stock)@L50,step =1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.L50_95<-renderUI({\n    sliderInput(\"L50_95\",\"Lt. increment 50%-95% mat.\",min=0, max=100, value=get(input$stock)@L50_95,step =1)\n    })\n  })\n  observeEvent(input$stock, {output$stock.D<-renderUI({\n    sliderInput(\"D\",\"Current stock status\",min=0, max=1, value=get(input$stock)@D,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Size_area<-renderUI({\n    sliderInput(\"Size_area\",\"Relative size of area\",min=0, max=1, value=get(input$stock)@Size_area_1,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Prob_staying<-renderUI({\n    sliderInput(\"Prob_staying\",\"Prob. staying in area\",min=0, max=1, value=get(input$stock)@Prob_staying,step =0.01)\n    })\n  })\n  observeEvent(input$stock, {output$stock.Frac_area<-renderUI({\n    sliderInput(\"Frac_area\",\"Fraction of unfished B in area\",min=0, max=1, value=get(input$stock)@Frac_area_1,step =0.01)\n    })\n  })\n  \n  \n  #Fleet inputs\n  output$fleet.choicelist<-renderUI({\n    if (is.null(avail(\"Fleet\"))) return(NULL) \n    else {Fleets <- avail(\"Fleet\")\n    selectInput(\"fleet\",\"Choose Fleet type\",as.list(Fleets),selected = Fleets[1])}\n  })\n\n  observeEvent(input$fleet, {output$fleet.nyrs<-renderUI({\n    numericInput(\"fleetyrs\",\"# of years\",value=get(input$fleet)@nyears,min=1, max=1000, step=1)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.spattarg<-renderUI({\n    sliderInput(\"Spat_targ\",\"Fishing reltiave to vul. biomass\",min=1, max=10, value=get(input$fleet)@Spat_targ,step =0.01)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.L5<-renderUI({\n    sliderInput(\"L5\",\"Length at 5% selectivity\",min=0, max=1, value=get(input$fleet)@L5,step =1)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.LFS<-renderUI({\n    sliderInput(\"LFS\",\"Length at full selectivity\",min=0, max=1, value=get(input$fleet)@LFS,step =1)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.Vmaxlen<-renderUI({\n    sliderInput(\"Vmaxlen\",\"Length at 5% selectivity\",min=0, max=1, value=get(input$fleet)@Vmaxlen,step =1)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.Fsd<-renderUI({\n    sliderInput(\"Fsd\",\"Interannual variability in F\",min=0, max=10, value=get(input$fleet)@Fsd,step =0.01)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.qinc<-renderUI({\n    sliderInput(\"qinc\",\"Mean percent change in fishing efficiency\",min=-100, max=100, value=get(input$fleet)@qinc,step =1)\n    })\n  })\n  observeEvent(input$fleet, {output$fleet.qcv<-renderUI({\n    sliderInput(\"qcv\",\"Interannual variability in fishing efficiency\",min=-0, max=10, value=get(input$fleet)@qcv,step =0.1)\n    })\n  })\n\n#Observation inputs  \n  output$obs.choicelist<-renderUI({\n    if (is.null(avail(\"Observation\"))) return(NULL) \n    else {ObsMod <- avail(\"Observation\")}\n    selectInput(\"obs\",\"Choose Observation model\",as.list(ObsMod),selected = ObsMod[1])\n  })\n  \n  observeEvent(input$obs, {output$Obs.LenMcv<-renderUI({\n    numericInput(\"LenMcv\",\"Bias: L50%\",value=get(input$obs)@LenMcv,min=0, max=5, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Cobs<-renderUI({\n    sliderInput(\"Cobs\",\"Error in catches\",min=-0, max=5, value=get(input$obs)@Cobs, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Cbiascv<-renderUI({\n    numericInput(\"Cbiascv\",\"Annual catch bias\",value=get(input$obs)@Cbiascv,min=0, max=5, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.CAA_nsamp<-renderUI({\n    sliderInput(\"CAA_nsamp\",\"Catch at age sample/year\",min=-0, max=2500, value=get(input$obs)@CAA_nsamp, step=1)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.CAA_ESS<-renderUI({\n    sliderInput(\"CAA_ESS\",\"Effective age samples/year\",min=-0, max=1250, value=get(input$obs)@CAA_ESS, step=1)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.CAL_nsamp<-renderUI({\n    sliderInput(\"CAL_nsamp\",\"Catch at length samples/year\",min=-0, max=10000, value=get(input$obs)@CAL_nsamp, step=1)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.CAL_ESS<-renderUI({\n    sliderInput(\"CAL_ESS\",\"Effective age samples/year\",min=-0, max=1250, value=get(input$obs)@CAL_ESS, step=1)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.CALcv<-renderUI({\n    sliderInput(\"CALcv\",\"Variability in length at age\",min=-0, max=1, value=get(input$obs)@CALcv, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Iobs<-renderUI({\n    sliderInput(\"Iobs\",\"Obs. error in rel. abund. index\",min=-0, max=2, value=get(input$obs)@Iobs, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Icv<-renderUI({\n    numericInput(\"Icv\",\"Bias: rel. abund. index\",value=get(input$obs)@Icv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Mcv<-renderUI({\n    numericInput(\"Mcv\",\"Bias: natural mortality\",value=get(input$obs)@Mcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Linfcv<-renderUI({\n    numericInput(\"Linfcv\",\"Bias: VBGF Linf\",value=get(input$obs)@Linfcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Kcv<-renderUI({\n    numericInput(\"Kcv\",\"Bias: VBGF k\",value=get(input$obs)@Kcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.t0cv<-renderUI({\n    numericInput(\"t0cv\",\"Bias: VBGF t0\",value=get(input$obs)@t0cv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.LFCcv<-renderUI({\n    numericInput(\"LFCcv\",\"Bias: length at first capture\",value=get(input$obs)@LFCcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.LFScv<-renderUI({\n    numericInput(\"LFScv\",\"Bias: length at 1st full selectivity\",value=get(input$obs)@LFScv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.B0cv<-renderUI({\n    numericInput(\"B0cv\",\"Bias: unfished stock size\",value=get(input$obs)@B0cv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.FMSYcv<-renderUI({\n    numericInput(\"FMSYcv\",\"Bias: FMSY\",value=get(input$obs)@FMSYcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.FMSY_Mcv<-renderUI({\n    numericInput(\"FMSY_Mcv\",\"Bias: FMSY/M\",value=get(input$obs)@FMSY_Mcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.BMSY_B0cv<-renderUI({\n    numericInput(\"BMSY_B0cv\",\"Bias: BMSY/B0\",value=get(input$obs)@BMSY_B0cv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.rcv<-renderUI({\n    numericInput(\"rcv\",\"Bias: intrinsic rate of increase\",value=get(input$obs)@rcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Dbiascv<-renderUI({\n    numericInput(\"Dbiascv\",\"Bias: stock status\",value=get(input$obs)@Dbiascv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Dcv<-renderUI({\n    sliderInput(\"Dcv\",\"Obs. error in stock status\",min=-0, max=2, value=get(input$obs)@Dcv, step=0.01)\n    })  \n  })\n  observeEvent(input$obs, {output$Obs.Btbias<-renderUI({\n    sliderInput(\"Btbias\",\"Bounds in obs. error of current stock scale\",min=-0, max=2, value=get(input$obs)@Btbias, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Btcv<-renderUI({\n    sliderInput(\"Btcv\",\"Obs. error in current stock scale\",min=-0, max=2, value=get(input$obs)@Btcv, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Fcurbiascv<-renderUI({\n    numericInput(\"Fcurbiascv\",\"Bias: current F\",value=get(input$obs)@Fcurbiascv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Fcurcv<-renderUI({\n    sliderInput(\"Fcurcv\",\"Obs. error in current F\",min=-0, max=2, value=get(input$obs)@Fcurcv, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.hcv<-renderUI({\n    numericInput(\"hcv\",\"Bias: steepness\",value=get(input$obs)@hcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.maxagecv<-renderUI({\n    numericInput(\"maxagecv\",\"Bias in max. age\",value=get(input$obs)@maxagecv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Reccv<-renderUI({\n    sliderInput(\"Reccv\",\"Obs. error in for recruitment slope\",min=-0, max=2, value=get(input$obs)@Reccv, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Irefcv<-renderUI({\n    numericInput(\"Irefcv\",\"Bias: target reference stock status\",value=get(input$obs)@Irefcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Crefcv<-renderUI({\n    numericInput(\"Crefcv\",\"Bias: target catch (e.g., MSY)\",value=get(input$obs)@Crefcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.Brefcv<-renderUI({\n    numericInput(\"Brefcv\",\"Bias: target reference biomass (e.g. BMSY)\",value=get(input$obs)@Brefcv,min=0, max=2, step=0.01)\n    })\n  })\n  observeEvent(input$obs, {output$Obs.beta<-renderUI({\n    sliderInput(\"beta\",\"Bounds index exponent\",min=0, max=5, value=get(input$obs)@beta, step=0.01)\n  })\n  })\n\n  \n#Run MSE\n    OM<-reactive({\n    #Update Stock inputs\n    stock.in<-get(input$stock)\n    stock.in@maxage<-input$maxage\n    stock.in@M<-input$M\n    stock.in@Msd<-input$Msd\n    stock.in@Mgrad<-input$Mgrad\n    stock.in@Linf<-input$Linf\n    stock.in@Linfsd<-input$Linfsd\n    stock.in@Linfgrad<-input$Linfgrad\n    stock.in@K<-input$K\n    stock.in@Ksd<-input$Ksd\n    stock.in@Kgrad<-input$Kgrad\n    stock.in@t0<-input$t0\n    stock.in@a<-input$WtLt_a\n    stock.in@b<-input$WtLt_b\n    stock.in@R0<-input$R0\n    stock.in@SRrel<-input$SRrel\n    stock.in@h<-input$h\n    stock.in@recgrad<-input$recgrad\n    stock.in@Perr<-input$Perr\n    stock.in@AC<-input$AC\n    stock.in@L50<-input$L50\n    stock.in@L50_95<-input$L50_95\n    stock.in@D<-input$D\n    stock.in@Size_area_1<-input$Size_area\n    stock.in@Prob_staying<-input$Prob_staying\n    stock.in@Frac_area_1<-input$Frac_area\n\n    fleet.in<-get(input$fleet)\n    fleet.in@nyears<-input$fleetyrs\n    fleet.in@Spat_targ<-input$Spat_targ\n    fleet.in@L5<-input$L5\n    fleet.in@LFS<-input$LFS\n    fleet.in@Vmaxlen<-input$Vmaxlen\n    fleet.in@Fsd<-input$Fsd\n    fleet.in@qinc<-input$qinc\n    fleet.in@qcv<-input$qcv\n    \n    obsmod.in<-get(input$obs)\n    \n    obsmod.in@LenMcv<-input$LenMcv\n    obsmod.in@Cobs<-input$Cobs\n    obsmod.in@Cbiascv<-input$Cbiascv\n    obsmod.in@CAA_nsamp<-input$CAA_nsamp\n    obsmod.in@CAA_ESS<-input$CAA_ESS\n    obsmod.in@CAL_nsamp<-input$CAL_nsamp\n    obsmod.in@CAL_ESS<-input$CAL_ESS\n    obsmod.in@CALcv<-input$CALcv\n    obsmod.in@Iobs<-input$Iobs\n    obsmod.in@Icv<-input$Icv\n    obsmod.in@Mcv<-input$Mcv\n    obsmod.in@Kcv<-input$Kcv\n    obsmod.in@t0cv<-input$t0cv\n    obsmod.in@LFCcv<-input$LFCcv\n    obsmod.in@LFScv<-input$LFScv\n    obsmod.in@B0cv<-input$B0cv\n    obsmod.in@FMSYcv<-input$FMSYcv\n    obsmod.in@FMSY_Mcv<-input$FMSY_Mcv\n    obsmod.in@BMSY_B0cv<-input$BMSY_B0cv\n    obsmod.in@Dbiascv<-input$Dbiascv\n    obsmod.in@Dcv<-input$Dcv\n    obsmod.in@Btbias<-input$Btbias\n    obsmod.in@Btcv<-input$Btcv\n    obsmod.in@Fcurbiascv<-input$Fcurbiascv\n    obsmod.in@Fcurcv<-input$Fcurcv\n    obsmod.in@hcv<-input$hcv\n    obsmod.in@maxagecv<-input$maxagecv\n    obsmod.in@Reccv<-input$Reccv\n    obsmod.in@Irefcv<-input$Irefcv\n    obsmod.in@Crefcv<-input$Crefcv\n    obsmod.in@Brefcv<-input$Brefcv\n    obsmod.in@beta<-input$beta\n\n    OM<- new('OM',stock.in, fleet.in, obsmod.in)\n    #MPs<-c(input$checkGroup,input$checkGroup2,input$checkGroupNAout,input$checkGroupNAin)\n    #ourMSE <- runMSE(OpMod, MPs=MPs, proyears=input$Projyears, interval=input$MSE_intervals, nsim=input$numsims,reps=input$reps)\n    return(OM)\n  })\n\n  \n  \n    MPs<-reactive({\n    MPs<-c(input$checkGroup,input$checkGroup2,input$checkGroupNAout,input$checkGroupNAin)\n    return(MPs)\n  })\n  \n #   output$MPtest <- renderPrint({    \n#      c(input$run_dlm_MSE,runMSE.box,run.check,runMSE.box)\n#      })\n\n      #runMSE.box<-eventReactive(input$run_dlm,{length(input$checkGroup)})\n\n#  observeEvent(input$run_dlm_MSE,{\n#    sfInit(parallel=TRUE, cpus=detectCores())\n#    ourMSE <- runMSErobust(OM(), MPs=MPs(), proyears=input$Projyears, interval=input$MSE_intervals, nsim=input$numsims,reps=input$reps)\n#    MSEout<-reactive({\n#    ourMSE <- runMSE(OM(), MPs=MPs(), proyears=input$Projyears, interval=input$MSE_intervals, nsim=input$numsims,reps=input$reps)\n#    return(ourMSE)\n#    })\n#  })\n\n    runMSE.box<-eventReactive(input$run_dlm_MSE,{\n          MSEout <- runMSE(OM(), MPs=MPs(), proyears=input$Projyears, interval=input$MSE_intervals, nsim=input$numsims,reps=input$reps)\n         return(MSEout)\n    })\n      #MSEout<-reactive({\n\n      #})\n    \n \n  output$MSE_Convergence <- renderPlot({   \n    MSEout<-runMSE.box()\n    print(CheckConverg(MSEout))\n    output$downloadMSE_Converge <- downloadHandler(\n      filename = function() {paste0(\"MSE_Converge\",Sys.time(),\".png\")},\n      content = function(file) {\n        png(file, type='cairo',width=800,height=720)\n        CheckConverg(MSEout)\n        dev.off()},contentType = 'image/png') \n  })\n    \n  output$MSE_TO1_plot1 <- renderPlot({   \n    MSEout<-runMSE.box()\n    print(Tplot(MSEout,nam=\"F and biomass prop vs yield trade-offs\"))\n    output$downloadMSE_TOff1 <- downloadHandler(\n      filename = function() {paste0(\"MSE_TOff1\",Sys.time(),\".png\")},\n      content = function(file) {\n        png(file, type='cairo',width=800,height=720)\n        Tplot(MSEout,nam=\" \")\n        dev.off()},contentType = 'image/png') \n  })\n\n  output$MSE_TO1_plot2 <- renderPlot({   \n    MSEout<-runMSE.box()\n    print(Tplot2(MSEout,nam=\"Short/Long term yield to MSY and variability trade-offs\"))\n    output$downloadMSE_TOff2 <- downloadHandler(\n      filename = function() {paste0(\"MSE_TOff2\",Sys.time(),\".png\")},\n      content = function(file) {\n        png(file, type='cairo',width=800,height=500)\n        Tplot2(MSEout,nam=\" \")\n        dev.off()},contentType = 'image/png') \n  })\n\n  output$MSE_Kobe <- renderPlot({   \n    MSEout<-runMSE.box()\n    print(Kplot(MSEout,nam=\"Kobe plot\"))\n    output$downloadMSE_Kobe <- downloadHandler(\n      filename = function() {paste0(\"MSE_Kobe\",Sys.time(),\".png\")},\n      content = function(file) {\n        png(file, type='cairo',width=800,height=720)\n        Kplot(MSEout)\n        dev.off()},contentType = 'image/png') \n  })\n  \n  output$MSE_Projplot <- renderPlot({   \n    MSEout<-runMSE.box()\n    print(Pplot(MSEout))\n    output$downloadMSE_Pplot <- downloadHandler(\n      filename = function() {paste0(\"MSE_Pplot\",Sys.time(),\".png\")},\n      content = function(file) {\n      png(file, type='cairo',width=800,height=720)\n      Pplot(MSEout)\n      dev.off()},contentType = 'image/png') \n  })\n\n    output$MSE_VOI <- renderPlot({   \n      MSEout<-runMSE.box()\n      print(VOI(MSEout))\n    output$downloadMSE_VOI <- downloadHandler(\n      filename = function() {paste0(\"MSE_VOI\",Sys.time(),\".png\")},\n      content = function(file) {\n        png(file, type='cairo')\n        VOI(MSEout)\n        dev.off()},contentType = 'image/png') \n    })\n  \n    output$MSE_summary <- renderPrint({    \n         MSE.summary<-summary(runMSE.box())\n         MSEout<-runMSE.box()\n         output$downloadMSE <- downloadHandler(\n         filename = function() { paste0(\"MSEout\",Sys.time(),\".DMP\", sep='') },\n         content = function(file) {save(MSEout,file=file)}) \n         return(MSE.summary)\n         })\n    \n    output$MSEplots <- renderUI({\n      tabsetPanel(id = \"subTabPanel1\", \n                  tabPanel(\"Convergence plot\",plotOutput(\"MSE_Convergence\",width=\"800px\",height=\"720px\"),downloadButton('downloadMSE_Converge', 'Download figures')),\n                  tabPanel(\"Trade-off plots\",plotOutput(\"MSE_TO1_plot1\",width=\"800px\",height=\"720px\"), downloadButton('downloadMSE_TOff1', 'Download Tradeoff Plot'), plotOutput(\"MSE_TO1_plot2\",width=\"800px\",height=\"500px\"),downloadButton('downloadMSE_TOff2', 'Download Tradeoff Plot')),\n                  tabPanel(\"Kobe plot\",plotOutput(\"MSE_Kobe\",width=\"800px\",height=\"720px\"),downloadButton('downloadMSE_Kobe', 'Download figures')),\n                  tabPanel(\"Projection plot\",plotOutput(\"MSE_Projplot\",width=\"800px\",height=\"720px\"),downloadButton('downloadMSE_Pplot', 'Download figures')),\n                  tabPanel(\"Value of information\",plotOutput(\"MSE_VOI\"),downloadButton('downloadMSE_VOI', 'Download figures')),\n                  tabPanel(\"MSE summary\",verbatimTextOutput(\"MSE_summary\"),downloadButton('downloadMSE', 'Download MSE output'))\n      )            \n    })\n    \n#End ShinyServer function\n})  \n  \n\n\n\n\n#run.check<-eventReactive(input$run_dlm,{length(input$checkGroup)})\n#output$TACplots<- renderPlot({    \n#  inFile <- input$file1\n#  if (is.null(inFile)) return(NULL)\n#  dlm_input<-new(\"DLM_data\",stock=inFile$datapath)\n#  if(run.check()>0){\n#    TAC.df<-data.frame(t(TAC(dlm_input,MPs=input$checkGroup)@TAC[,,1]))\n#    if(length(input$checkGroup)==1){\n#      TAC.df.melt<-melt(TAC.df)\n#      TAC.df.melt[,1]<-input$checkGroup\n#      TAC.plot<-ggplot(data=TAC.df.melt,aes(as.factor(variable),value))+geom_boxplot()+ coord_flip()+labs(x=\"DL Method\",y=\"TAC\")\n#    }\n#    if(length(input$checkGroup)>1){\n#      colnames(TAC.df)<-input$checkGroup\n#      TAC.df.melt<-melt(TAC.df)\n#      TAC.plot<-ggplot(data=TAC.df.melt,aes(as.factor(variable),value))+geom_boxplot()+ coord_flip()+labs(x=\"DL Method\",y=\"TAC\")\n#    }\n#    print(TAC.plot)\n#    output$downloadTAC <- downloadHandler(\n#      filename = function() { paste(\"TAC\", '.csv', sep='') },\n#      content = function(file) {write.csv(TAC.df, file)}) \n#  }\n#})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#OLD STUFF\n\n#Maturity\n#    if(any(is.na(c(dlm_input@L50,dlm_input@L95)))==\"FALSE\")\n#    {\n#      max.lt<-max(dlm_input@L95,dlm_input@vbLinf,na.rm = TRUE)\n#      if(max.lt== -Inf){max.lt<-100}\n#      dlm_input.mat<-data.frame(cbind(c(0:max.lt),Mat.fit(c(dlm_input@L95,dlm_input@L50),c(0:max.lt),return.type=1)))\n#      colnames(dlm_input.mat)<-c(\"Length\",\"Proportion\")\n#      dlm_input.mat.plot<-ggplot(dlm_input.mat,aes(Length,Proportion))+geom_line(lwd=2)+annotate(\"text\",x=0.9*max(dlm_input.mat$Length),y=c(0.25,0.15),label=c(paste0(\"Lmat50=\",round(dlm_input@L50,2)),paste0(\"Lmat95=\",round(dlm_input@L95,2))),xmin=0,ymin=0,size=5) \n#    }\n#    if(any(is.na(c(dlm_input@L50,dlm_input@L95)))==\"TRUE\")\n#    {\n#      df <- data.frame()\n#      dlm_input.mat.plot<-ggplot(df) + geom_point() + xlim(0, 0) + ylim(0, 0)+xlab(\"\")+ylab(\"\")+\n#      theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+\n#      theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+\n#      annotate(\"text\",x=0,y=0,label=\"Lt-Wt not available\",size=5) \n#    }\n\n#    print(dlm_input.mat.plot, vp = vplayout(2, 1))\n",
    "created" : 1470442712929.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1978072832",
    "id" : "569A2341",
    "lastKnownWriteTime" : 1470443914,
    "last_content_update" : 1470443914116,
    "path" : "D:/JMC/Documents/GitHub/DLmethods tools/Shiny_DLMtool/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}