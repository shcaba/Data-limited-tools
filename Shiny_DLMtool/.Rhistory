# FRAM.Ass.Not.Attend <- c("Fred", "John")
FRAM.Ass.Not.Attend <- c("Ian", "Allan")
if(!exists("FRAM.Ass.Not.Attend"))
FRAM.Ass.Not.Attend <- NA
# list of potential lead names
FRAM.Ass1.All <- c("John", "Jason", "Ian", "Chantel", "JT", "Melissa", "Allan", "Vlada", "Owen")
if(all(is.na(match(FRAM.Ass.Not.Attend, FRAM.Ass1.All)))) {
FRAM.Ass1 <- sort(FRAM.Ass1.All)
} else {
out <- match(FRAM.Ass.Not.Attend, FRAM.Ass1.All)
out <- out[!is.na(out)]
FRAM.Ass1 <- sort(FRAM.Ass1.All[-out])
}
lead <- FRAM.Ass1[sample(length(FRAM.Ass1),1)]  # draw for lead
# list of potential snack names; remove lead from list of potential snack names and add any just snack folks
FRAM.Ass2.All <- c(FRAM.Ass1[!(FRAM.Ass1 %in% lead)] , "Elizabeth")
if(all(is.na(match(FRAM.Ass.Not.Attend, FRAM.Ass2.All)))) {
FRAM.Ass2 <- sort(FRAM.Ass2.All)
} else {
out <- match(FRAM.Ass.Not.Attend, FRAM.Ass2.All)
out <- out[!is.na(out)]
FRAM.Ass2 <- sort(FRAM.Ass2.All[-out])
}
snacks <- FRAM.Ass2[sample(length(FRAM.Ass2),1)]  # draw for snacks
# print results
cat("\nThose not attending:  ", FRAM.Ass.Not.Attend,  "\nseed:  ",seed, "\nlead:  ",lead, "\nsnacks:",snacks,"\n") # report results
q()
q()
library(data.table)
mydat <- fread('http://parcel.sanjuanco.com/PropertyAccess/SearchResultsSales.aspx?cid=0')
mydat
mydat <- fread('http://parcel.sanjuanco.com/PropertyAccess/SearchResultsSales.aspx?cid=0')
q()
library(DLMtool)
#access data objects
for(i in 1:length(DLMdat))assign(DLMdat[[i]]@Name,DLMdat[[i]])
avail('DLM_data')
ChinaTAC<-TAC(China_rockfish)
ChinaTAC@TAC
ChinaTAC@TAC[,,1]
?TAC
ChinaTAC@TAC[1,,1]
average(ChinaTAC@TAC[1,,1])
mean(ChinaTAC@TAC[1,,1])
mean(ChinaTAC@TAC[2,,1])
mean(ChinaTAC@TAC[1,,1])*0.5+mean(ChinaTAC@TAC[2,,1])*0.5
mean(ChinaTAC@TAC[1:2,,1])
melt(t(ChinaTAC@TAC[,,1]))
ChinaTAC@TAC[,,1]
ChinaTAC@TAC[,,1]%%c(1,0,0,0,0,0,0,0,0)
ChinaTAC@TAC[,,1]%%c(1,0,0,0,0,0,0,0,0)wt.vec<-c(1,0,0,0,0,0,0,0,0)
sum(ChinaTAC@TAC[,,1]%%wt.vec)
wt.vec<-c(1,0,0,0,0,0,0,0,0)
sum(ChinaTAC@TAC[,,1]%%wt.vec)
sum(ChinaTAC@TAC[,,1]%%wt.vec,na.rm=TRUE)
sum(ChinaTAC@TAC[1,1])
sum(ChinaTAC@TAC[1,,1])
sum(ChinaTAC@TAC[1,,1])/100
mean(ChinaTAC@TAC[1,,1])
ChinaTAC@TAC[,,1]%%wt.vec
wt.vec
ChinaTAC@TAC[,,1]
ChinaTAC@TAC[,,1]*1
ChinaTAC@TAC[,,1]%%1
?sweep
ChinaTAC@TAC[,,1]*wt.vec
mean(ChinaTAC@TAC[1,,1]*wt.vec)
ChinaTAC@TAC[,,1]*wt.vec
mean(ChinaTAC@TAC[,,1]*wt.vec)[1,]
dim(ChinaTAC@TAC[,,1]*wt.vec)
sum(ChinaTAC@TAC[,,1]*wt.vec)[1,]
sum(ChinaTAC@TAC[,,1]*wt.vec)[1,1]
ChinaTAC@TAC[,,1]*wt.vec)[1,]
ChinaTAC@TAC[,,1]*wt.vec)[1,1,1]
ChinaTAC@TAC[,,1]*wt.vec)[,1]
ChinaTAC@TAC[,,1]*wt.vec)[1]
ChinaTAC@TAC[,,1]*wt.vec)
ChinaTAC@TAC[,,1]*wt.vec
(ChinaTAC@TAC[,,1]*wt.vec)[1]
(ChinaTAC@TAC[,,1]*wt.vec)[1,]
mean(ChinaTAC@TAC[,,1]*wt.vec)[1,])
mean((ChinaTAC@TAC[,,1]*wt.vec)[1,])
mean((ChinaTAC@TAC[,,1]*wt.vec))
mean((ChinaTAC@TAC[,,1]*wt.vec),na.rm=T)
(ChinaTAC@TAC[,,1]*wt.vec)
tac.wt<-(ChinaTAC@TAC[,,1]*wt.vec)
tac.wt[tac.wt=0]
tac.wt[tac.wt==0]
tac.wt
tac.wt[tac.wt==0]
tac.wt==0
tac.wt[tac.wt==0]=0
tac.wt[tac.wt==0]=NA
tac.wt
avearge(tac.wt)
mean(tac.wt)
mean(tac.wt,na.rm=T)
wt.vec<-c(0.5,0.5,0,0,0,0,0,0,0)
tac.wt<-(ChinaTAC@TAC[,,1]*wt.vec)
tac.wt[tac.wt==0]<-NA
tac.wt.mean<-mean(tac.wt,na.rm=T)
tac.wt.mean
sum(tac.wt,na.rm=T)
sum(tac.wt,na.rm=T)/9
sum(tac.wt,na.rm=T)/100
dim(tac.wt)
ncol(tac.wt)
wt.vec<-c(0.25,0.25,0.25,0.25,0,0,0,0,0)
tac.wt<-(ChinaTAC@TAC[,,1]*wt.vec)
tac.wt[tac.wt==0]<-NA
tac.wt.mean<-sum(tac.wt,na.rm=T)/ncol(tac.wt)
tac.wt.mean
ChinaTAC@TAC[,,1]
mean(ChinaTAC@TAC[,,1])
mean(ChinaTAC@TAC[,,1],na.rm=T)
hist(ChinaTAC@TAC[,,1])
?hist
?density
density(ChinaTAC@TAC[,,1])
c(ChinaTAC@TAC[,,1])
dim(c(ChinaTAC@TAC[,,1]))
na.omit(c(ChinaTAC@TAC[,,1]))
density(na.omit(c(ChinaTAC@TAC[,,1])))
plot(density(na.omit(c(ChinaTAC@TAC[,,1]))))
xx<-density(na.omit(c(ChinaTAC@TAC[,,1])))
xx
attribues(xx)
attributes(xx)
xx$x
attributes(xx)
quantile(xx$x,0.5)
quantile(xx$x,0.9)
plot(density(na.omit(c(ChinaTAC@TAC[,,1]))),main="",lwd=2.5)
plot(density(na.omit(c(ChinaTAC@TAC[,,1]))),main="",lwd=2.5,xlab="TAC")
load("C:\\Users\\Jason.Cope\\Downloads\\TAC2016-08-05 16-19-58.DMP")
ls()
TAC.out
getwd()
reps=1000
Dep.in=c(2,0.4,0.1)
M.in=c(3,0.1,0.4,3,0.1,0.4)
h.in=c(2,0.6,0.2)
L1.in=c(3,3,3,3)
Linf.in=c(30,30,30,30)
k.in=c(0.2,0.2,0.2,0.2)
Zfrac.Beta.in=c(4,0.2,0.6,4,0.5,2)
R_start=6
sum_age=0
sb_ofl_yrs=c(2010,2011,2012)
f_yr=2010
year0=1911
genders=F
doR0.loop=1
Amax=30
Amat=20
catch=1:100
Spp.quant.out<-list()
if(h.in[1]>=0){Input.draws<-as.data.frame(matrix(NA,nrow=reps,ncol=6))}
if(h.in[1]<0){Input.draws<-as.data.frame(matrix(NA,nrow=reps,ncol=7))}
Input.draws.M<-as.data.frame(matrix(NA,nrow=reps,ncol=4))
sb.years<-c(year0:sb_ofl_yrs[1])
Quant.out<-as.data.frame(matrix(NA,nrow=reps,ncol=28))
Quant.out.bad<-as.data.frame(matrix(NA,1,ncol=28))
SB.out<-as.data.frame(matrix(NA,nrow=reps,ncol=length(sb.years)))
colnames(SB.out)<-sb.years
starter.new<-readLines(paste("D:/JMC/Desktop/AnnaC_proj_dlm/SSS_dlm_test/Aurora/SSS","/starter.ss",sep=""))
sum_age_line<-strsplit(starter.new[grep("summary biomass",starter.new)], " ")[[1]]
sum_age_line[1]<-sum_age
starter.new[grep("summary biomass",starter.new)]<-paste(sum_age_line, collapse=" ")
write(starter.new,paste("D:/JMC/Desktop/AnnaC_proj_dlm/SSS_dlm_test/Aurora/SSS","/starter.ss",sep=""))
i<-1
ii<-1
n.bad<-1
while(i<reps+1){
print(i)
print(ii)
if(ii%%10==0){print(file.name[1])}
### Draw random values ###
#-99 = no estimation
#0 = normal
#10 = truncated normal
#1 = symmetric beta
#2 = full beta (rbeta)
#3 = lognormal
#30 = truncated lognormal
#4 = uniform
if(Dep.in[1]==2){Dep.draw<-round(1-rbeta.ab(1,1-Dep.in[2],Dep.in[3],0.01,0.99),2)}
if(Dep.in[1]==10){Dep.draw<-round(rtnorm(1,Dep.in[2],Dep.in[3],0.01,1),2)}
if(Dep.in[1]==10){Input.draws[i,2]<-Dep.draw}  ### I guess this if is not needed
#Steenpess
if(h.in[1]>=0)
{
if(h.in[1]==2){h.draw<-round(rbeta.ab(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==10){h.draw<-round(rtnorm(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==30){h.draw<-round(rtlnorm(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==4){h.draw<-round(runif(1,h.in[2],h.in[3]),2)}
Input.draws[i,1]<-h.draw
}
#Three parameter S-R model
if(Zfrac.Beta.in[1]>=0)
{
if(Zfrac.Beta.in[1]==10){Zfrac.draw<-round(rtnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==30){Zfrac.draw<-round(rtlnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==4){Zfrac.draw<-round(runif(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3]),2)}
Input.draws[i,1]<-Zfrac.draw
}
if(Zfrac.Beta.in[4]>=0)
{
if(Zfrac.Beta.in[4]==10){Beta.draw<-round(rtnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==30){Beta.draw<-round(rtlnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==4){Beta.draw<-round(runif(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6]),2)}
Input.draws[i,7]<-Beta.draw
}
#Natural mortality
if(M.in[1]>=0)
{
if(M.in[1]==0){M.draw<-round(rnorm(1,M.in[2],M.in[3]),2)}
if(M.in[1]==3){M.draw<-round(rlnorm(1,log(M.in[2]),M.in[3]),2)}
Input.draws[i,3]<-M.draw
}
#Growth parameters
if(sum(L1.in[1:2])>0){L1.draw<-round(rnorm(1,L1.in[1],L1.in[1]),2); Input.draws[i,4]<-L1.draw}
if(sum(Linf.in[1:2])>0){Linf.draw<-round(rnorm(1,Linf.in[1],Linf.in[1]),2); Input.draws[i,5]<-Linf.draw}
if(sum(k.in[1:2])>0){k.draw<-round(rnorm(1,k.in[1],k.in[1]),2); Input.draws[i,6]<-k.draw}
#Male draws
if(genders==T)
{
if(M.in[4]>=0)
{
if(M.in[4]==0){M.draw.M<-round(rnorm(1,M.in[5],M.in[6]),2)}
if(M.in[4]==3){M.draw.M<-round(rlnorm(1,log(M.in[5]),M.in[6]),2)}
Input.draws.M[i,1]<-M.draw.M
}
if(sum(L1.in[3:4])>0){L1.draw.M<-round(rnorm(1,L1.in[3],L1.in[4]),2); Input.draws.M[i,2]<-L1.draw.M}
if(sum(Linf.in[3:4])>0){Linf.draw.M<-round(rnorm(1,Linf.in[3],Linf.in[4]),2); Input.draws.M[i,3]<-Linf.draw.M}
if(sum(k.in[3:4])>0){k.draw.M<-round(rnorm(1,k.in[3],k.in[4]),2); Input.draws.M[i,4]<-k.draw.M}
}
### Change DAT and CTL inputs ###
#change Depletion
########## change the data file with r4ss##############
##the problem here is that I make the changes to the file but then once I save it again wth the writedat function and I want to
## re-modife ithe file t it gives an error (Error in if (N_discard_fleets > 0) { : missing value where TRUE/FALSE needed)
## which I assume it shouldnt because I don't even change this.
library(r4ss)
dat.file<-SS_readdat("D:/JMC/Desktop/AnnaC_proj_dlm/SSS_dlm_test/Aurora/SSS/ARRA_dat3.ss", verbose = TRUE, echoall = TRUE, section = NULL)
dat.file
i<-1
ii<-1
n.bad<-1
print(i)
print(ii)
if(ii%%10==0){print(file.name[1])}
### Draw random values ###
#-99 = no estimation
#0 = normal
#10 = truncated normal
#1 = symmetric beta
#2 = full beta (rbeta)
#3 = lognormal
#30 = truncated lognormal
#4 = uniform
if(Dep.in[1]==2){Dep.draw<-round(1-rbeta.ab(1,1-Dep.in[2],Dep.in[3],0.01,0.99),2)}
if(Dep.in[1]==10){Dep.draw<-round(rtnorm(1,Dep.in[2],Dep.in[3],0.01,1),2)}
if(Dep.in[1]==10){Input.draws[i,2]<-Dep.draw}  ### I guess this if is not needed
#Steenpess
if(h.in[1]>=0)
{
if(h.in[1]==2){h.draw<-round(rbeta.ab(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==10){h.draw<-round(rtnorm(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==30){h.draw<-round(rtlnorm(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==4){h.draw<-round(runif(1,h.in[2],h.in[3]),2)}
Input.draws[i,1]<-h.draw
}
#Three parameter S-R model
if(Zfrac.Beta.in[1]>=0)
{
if(Zfrac.Beta.in[1]==10){Zfrac.draw<-round(rtnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==30){Zfrac.draw<-round(rtlnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==4){Zfrac.draw<-round(runif(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3]),2)}
Input.draws[i,1]<-Zfrac.draw
}
if(Zfrac.Beta.in[4]>=0)
{
if(Zfrac.Beta.in[4]==10){Beta.draw<-round(rtnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==30){Beta.draw<-round(rtlnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==4){Beta.draw<-round(runif(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6]),2)}
Input.draws[i,7]<-Beta.draw
}
#Natural mortality
if(M.in[1]>=0)
{
if(M.in[1]==0){M.draw<-round(rnorm(1,M.in[2],M.in[3]),2)}
if(M.in[1]==3){M.draw<-round(rlnorm(1,log(M.in[2]),M.in[3]),2)}
Input.draws[i,3]<-M.draw
}
#Growth parameters
if(sum(L1.in[1:2])>0){L1.draw<-round(rnorm(1,L1.in[1],L1.in[1]),2); Input.draws[i,4]<-L1.draw}
if(sum(Linf.in[1:2])>0){Linf.draw<-round(rnorm(1,Linf.in[1],Linf.in[1]),2); Input.draws[i,5]<-Linf.draw}
if(sum(k.in[1:2])>0){k.draw<-round(rnorm(1,k.in[1],k.in[1]),2); Input.draws[i,6]<-k.draw}
#Male draws
if(genders==T)
{
if(M.in[4]>=0)
{
if(M.in[4]==0){M.draw.M<-round(rnorm(1,M.in[5],M.in[6]),2)}
if(M.in[4]==3){M.draw.M<-round(rlnorm(1,log(M.in[5]),M.in[6]),2)}
Input.draws.M[i,1]<-M.draw.M
}
if(sum(L1.in[3:4])>0){L1.draw.M<-round(rnorm(1,L1.in[3],L1.in[4]),2); Input.draws.M[i,2]<-L1.draw.M}
if(sum(Linf.in[3:4])>0){Linf.draw.M<-round(rnorm(1,Linf.in[3],Linf.in[4]),2); Input.draws.M[i,3]<-Linf.draw.M}
if(sum(k.in[3:4])>0){k.draw.M<-round(rnorm(1,k.in[3],k.in[4]),2); Input.draws.M[i,4]<-k.draw.M}
}
rbeta.ab <- function(n, m, s, a, b)
{
# calculate mean of corresponding standard beta dist
mu.std <- (m-a)/(b-a)
# calculate parameters of std. beta with mean=mu.std and sd=s
alpha <- (mu.std^2 - mu.std^3 - mu.std*s^2) / s^2
beta  <- (mu.std - 2*mu.std^2 + mu.std^3 - s^2 + mu.std*s^2) / s^2
# generate n draws from standard beta
b.std <- rbeta(n, alpha, beta)
# linear transformation from beta(0,1) to beta(a,b)
b.out <- (b-a)*b.std + a
return(b.out)
}
print(i)
print(ii)
if(ii%%10==0){print(file.name[1])}
### Draw random values ###
#-99 = no estimation
#0 = normal
#10 = truncated normal
#1 = symmetric beta
#2 = full beta (rbeta)
#3 = lognormal
#30 = truncated lognormal
#4 = uniform
if(Dep.in[1]==2){Dep.draw<-round(1-rbeta.ab(1,1-Dep.in[2],Dep.in[3],0.01,0.99),2)}
if(Dep.in[1]==10){Dep.draw<-round(rtnorm(1,Dep.in[2],Dep.in[3],0.01,1),2)}
if(Dep.in[1]==10){Input.draws[i,2]<-Dep.draw}  ### I guess this if is not needed
#Steenpess
if(h.in[1]>=0)
{
if(h.in[1]==2){h.draw<-round(rbeta.ab(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==10){h.draw<-round(rtnorm(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==30){h.draw<-round(rtlnorm(1,h.in[2],h.in[3],0.25,0.99),2)}
if(h.in[1]==4){h.draw<-round(runif(1,h.in[2],h.in[3]),2)}
Input.draws[i,1]<-h.draw
}
#Three parameter S-R model
if(Zfrac.Beta.in[1]>=0)
{
if(Zfrac.Beta.in[1]==10){Zfrac.draw<-round(rtnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==30){Zfrac.draw<-round(rtlnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==4){Zfrac.draw<-round(runif(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3]),2)}
Input.draws[i,1]<-Zfrac.draw
}
if(Zfrac.Beta.in[4]>=0)
{
if(Zfrac.Beta.in[4]==10){Beta.draw<-round(rtnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==30){Beta.draw<-round(rtlnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==4){Beta.draw<-round(runif(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6]),2)}
Input.draws[i,7]<-Beta.draw
}
#Natural mortality
if(M.in[1]>=0)
{
if(M.in[1]==0){M.draw<-round(rnorm(1,M.in[2],M.in[3]),2)}
if(M.in[1]==3){M.draw<-round(rlnorm(1,log(M.in[2]),M.in[3]),2)}
Input.draws[i,3]<-M.draw
}
#Growth parameters
if(sum(L1.in[1:2])>0){L1.draw<-round(rnorm(1,L1.in[1],L1.in[1]),2); Input.draws[i,4]<-L1.draw}
if(sum(Linf.in[1:2])>0){Linf.draw<-round(rnorm(1,Linf.in[1],Linf.in[1]),2); Input.draws[i,5]<-Linf.draw}
if(sum(k.in[1:2])>0){k.draw<-round(rnorm(1,k.in[1],k.in[1]),2); Input.draws[i,6]<-k.draw}
#Male draws
if(genders==T)
{
if(M.in[4]>=0)
{
if(M.in[4]==0){M.draw.M<-round(rnorm(1,M.in[5],M.in[6]),2)}
if(M.in[4]==3){M.draw.M<-round(rlnorm(1,log(M.in[5]),M.in[6]),2)}
Input.draws.M[i,1]<-M.draw.M
}
if(sum(L1.in[3:4])>0){L1.draw.M<-round(rnorm(1,L1.in[3],L1.in[4]),2); Input.draws.M[i,2]<-L1.draw.M}
if(sum(Linf.in[3:4])>0){Linf.draw.M<-round(rnorm(1,Linf.in[3],Linf.in[4]),2); Input.draws.M[i,3]<-Linf.draw.M}
if(sum(k.in[3:4])>0){k.draw.M<-round(rnorm(1,k.in[3],k.in[4]),2); Input.draws.M[i,4]<-k.draw.M}
}
dat.file<-SS_readdat("D:/JMC/Desktop/AnnaC_proj_dlm/SSS_dlm_test/Aurora/SSS/ARRA_dat3.ss", verbose = TRUE, echoall = TRUE, section = NULL)
library(r4ss)
dat.file<-SS_readdat("D:/JMC/Desktop/AnnaC_proj_dlm/SSS_dlm_test/Aurora/SSS/ARRA_dat3.ss", verbose = TRUE, echoall = TRUE, section = NULL)
dat.file$styr
dat.file$styr<- year0 ##start year
dat.file$endyr<-f_yr ##end year
dat.file$Nages<-Amax ##Amax
all.yrs<-length(year0:f_yr) ##all years THIS NEEDED TO BE  LENGTH
dat.file$N_catch<-all.yrs
dat.file$catch<-as.data.frame(matrix(NA,nrow=all.yrs,ncol=3))
names(dat.file$catch)<-paste(c("FISHERY","year","seas"))
dat.file$catch$FISHERY<-catch ###catches for all years
dat.file$catch$year<-c(dat.file$styr:dat.file$endyr)
dat.file$catch$seas<-rep(1,all.yrs)
Lmax<- Linf.draw ##Lmax for the species
nlbins<-length(seq(0,Lmax,by=2))
dat.file$N_lbins<-nlbins
year0
if (Amax>= 60){           ###########here for the maximum age maybe it should eba  rule? or how we decide the max age in the agebins?
dat.file$N_agebins<-61
dat.file$agebin_vector<-seq(0,60,by=1)}
if(Amax<60){
dat.file$N_agebins<-Amax+1
dat.file$agebin_vector<-seq(0,Amax,by=1)}
dat.file$CPUE[[1]]<-c(year0,f_yr)
dat.file$CPUE[[4]]<-c(1,Dep.draw)
SS_writedat(dat.file, outfile="D:/JMC/Desktop/AnnaC_proj_dlm/SSS_dlm_test/Aurora/SSS/ARRA_dat3.ss", overwrite=TRUE)
ls()
load("C:\\Users\\Jason.Cope\\Downloads\\MSEout2016-08-09 17-04-51.DMP")
MSE.out
MSEout
Pplot(MSEout)
ls()
rm(list=ls(all=TRUE))
load("C:\\Users\\Jason.Cope\\Downloads\\TAC2016-08-10 15-36-07.DMP")
ls()
TAC.out
?quantile
quantile(TAC.out,0.95,na.rm=T)
quantile(TAC.out,0.95,na.rm=T)[1]
melt(TAC.out)
library(ggplot2)
library(grid)
library(reshape2)
melt(TAC.out)
head(melt(TAC.out))
(melt(TAC.out))$value
?aes
(melt(TAC.out))$value
geom_density(data=melt(TAC.out)$value)+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=dataframe(melt(TAC.out)$value)(+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=dataframe(melt(TAC.out)$value))+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=as.dataframe(melt(TAC.out)$value))+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=data.frame(melt(TAC.out)$value))+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
data.frame(melt(TAC.out))
head(data.frame(melt(TAC.out)))
geom_density(data=data.frame(melt(TAC.out))$value)+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=data.frame(melt(TAC.out))$value)+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
data.frame(melt(TAC.out))
xx<-data.frame(melt(TAC.out))
geom_density(data=xx+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=xx)+labs(x="TAC",y="Density")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
geom_density(data=xx)
geom_density(data=xx,na.rm=TRUE)
ggplot(data=xx,aes(value))+geom_density()
ggplot(data=xx,aes(value))+geom_density()+xlim(0,quantile(TAC.out,0.95,na.rm=T))
ggplot(data=xx,aes(value),fill=cut)+geom_density()+xlim(0,quantile(TAC.out,0.95,na.rm=T))
ggplot(data=xx,aes(value),fill="gray")+geom_density()+xlim(0,quantile(TAC.out,0.95,na.rm=T))
diamonds
head(diamonds)
ggplot(data=xx,aes(value),fill="red")+geom_density()+xlim(0,quantile(TAC.out,0.95,na.rm=T))
ggplot(data=xx,aes(value),fill="red")+geom_density()+xlim(0,quantile(TAC.out,0.95,na.rm=T))
ggplot(data=xx,aes(value),fill="red",colour="green")+geom_density()+xlim(0,quantile(TAC.out,0.95,na.rm=T))
ggplot(data=xx,aes(value))+geom_density(fill="gray")+xlim(0,quantile(TAC.out,0.95,na.rm=T))
ggplot(data=xx,aes(value))+geom_density(fill="gray")+xlim(0,quantile(TAC.out,0.95,na.rm=T))++labs(x="TAC",y="Density")
ggplot(data=xx,aes(value))+geom_density(fill="gray")+xlim(0,quantile(TAC.out,0.95,na.rm=T))+labs(x="TAC",y="Density")
load("C:\\Users\\Jason.Cope\\Downloads\\TAC2016-08-10 16-06-23.DMP")
TAC.out
ncol(TAC.out)
load("C:\\Users\\Jason.Cope\\Downloads\\TAC2016-08-10 15-36-07.DMP")
load("C:\\Users\\Jason.Cope\\Downloads\\TAC2016-08-10 15-36-07.DMP")
ncol(TAC.out)
TAC.out
head(TAC.out)
attributes(TAC.out)
x<-(TAC.out)
load("C:\\Users\\Jason.Cope\\Downloads\\TAC2016-08-10 16-06-23.DMP")
(TAC.out)
xy<-(TAC.out)
attributes(TAC.out)
xy
TAC.out
TAC.df<-data.frame(t(TAC.out))
TAC.df
TAC.df.melt<-melt(TAC.df)
TAC.df.melt
TAC.df.melt[,1]<-MP.labs()
TAC.df.melt[,1]<-"AVC"
TAC.df.melt
TAC.plot<-ggplot(data=TAC.df.melt,aes(as.factor(variable),value))+geom_boxplot()+ coord_flip()+labs(x="DL Method",y="TAC")+ylim(0,quantile(TAC.out,0.95,na.rm=T))
print(TAC.plot)
TAC.out
dim(TAC.out)
dim(x)
dim(xy)
dim(xy)==NULL
dim(x)==NULL
dim(xy)=="NULL"
is.null(dim(x))
is.null(dim(xy))
is.null(dim(xy))==TRUE
is.null(dim(xy))==FALSE
q()
shiny::runApp('D:/JMC/Documents/GitHub/Data-limited-tools/Shiny_DLMtool')
?runApp
runApp(server,ui)
runApp(server.r,ui.r)
runApp(server=server.r,ui=ui.r)
runApp(list(ui,server))
runApp(list(ui.r,server.r))
runApp()
runApp('D:/JMC/Documents/GitHub/Data-limited-tools/Shiny_DLMtool')
runApp('D:/JMC/Documents/GitHub/Data-limited-tools/Shiny_DLMtool')
runApp('D:/JMC/Documents/GitHub/Data-limited-tools/Shiny_DLMtool')
