library(rsconnect)
rsconnect::deployApp("D:/JMC/Documents/GitHub/DLmethods tools/Shiny_DLMtool")
library(rsconnect)
rsconnect::deployApp('D:/JMC/Documents/GitHub/DLmethods tools/Shiny_DLMtool')
shiny::runApp()
runApp()
runApp()
?source
getwd()
setwd("D:/JMC/Documents/GitHub/DLmethods tools/Shiny_DLMtool/")
getwd()
source('load_DLM.r',local = FALSE)
runApp()
library(rsconnect)
rsconnect::deployApp('D:/JMC/Documents/GitHub/DLmethods tools/Shiny_DLMtool')
library("DLMtool", lib.loc="~/R/R-3.3.0/library")
?DCAC
shiny::runApp()
getwd()
shiny::runApp()
1.1/0.5
0.9/0.5
?TAC
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages(c("abind", "car", "curl", "DEoptimR", "digest", "DLMtool", "httr", "jsonlite", "maps", "mgcv", "mime", "plotrix", "Rcpp", "RSelenium", "rversions"))
install.packages(c("abind", "car", "curl", "DEoptimR", "digest",
install.packages(c("abind", "car", "curl", "DEoptimR", "digest", "DLMtool", "httr", "jsonlite", "maps", "mgcv", "mime", "plotrix", "Rcpp", "RSelenium", "rversions"))
install.packages("DLMtool")
shiny::runApp()
install.packages("car")
install.packages("DLMtool")
install.packages("DLMtool")
install.packages("Rcpp")
library(DLMtool)
install.packages("DLMtool")
install.packages(c("car", "DLMtool", "mgcv", "survival"))
shiny::runApp()
install.packages("shinyjs")
?require
runApp()
runApp()
runApp()
runApp()
?fileInput
install.packages("C:/Users/Jason.Cope/Downloads/DLMtool_3.2.1.tar.gz", repos = NULL, type = "source")
