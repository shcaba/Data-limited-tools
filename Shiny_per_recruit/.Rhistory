shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
get_lengths <-function(Linf,k,t0,b,d,ages)
{
Lengths_exp<-Linf*(1-exp(-k*b*(1-d)*(ages-t0)))^(1/(b*(1-d)))
return(Lengths_exp)
}
## selectivity at age
get_selex <- function(aselex, ages){
Selex_a <- rep(0, length(ages))
Selex_a[which(ages>=aselex)] <- 1
return(Selex_a)
}
## numbers at age
get_Na <- function(ages, aselex, surv, exploit, R0){
S_a <- get_selex(aselex, ages)
N_a <- rep(NA, length(ages))
N_a[1] <- R0
for(i in 2:length(ages)){
N_a[i] <- (1-S_a[i-1]*exploit)*surv*N_a[i-1]
}
return(N_a)
}
## weight at age
get_weight <- function(ages, Linf,k,t0,lwa, lwb){
L_a <- get_lengths(Linf,k,t0,lwb,lwa,ages)
W_a <- sapply(1:length(L_a), function(x) lwa*L_a[x]^lwb)
return(W_a)
}
## proportion mature at age
get_mature <- function(agemat, ages){
Mat_a <- rep(0, length(ages))
Mat_a[which(ages>=agemat)] <- 1
return(Mat_a)
}
## fecundity at age
get_fec <- function(agemat, ages, Linf, k, t0, lwa, lwb){
Mat_a <- get_mature(agemat, ages)
weight <- get_weight(ages, Linf, k, t0, lwa, lwb)
Fec_a <- Mat_a*weight
return(Fec_a)
}
## spawning biomass at age
get_SB <- function(ages, agemat, Linf, k, t0, lwa, lwb, aselex, surv, exploit, R0){
N_a <- get_Na(ages, aselex, surv, exploit, R0)
Fec_a <- get_fec(agemat, ages, Linf, k, t0, lwa, lwb)
SB <- Fec_a*N_a
return(SB)
}
## catch at age
get_catch <- function(ages, aselex, surv, exploit, R0, Linf,k,t0,lwa, lwb){
N_a <- get_Na(ages, aselex, surv, exploit, R0)
S_a <- get_selex(aselex, ages)
weight <- get_weight(ages, Linf, k, t0, lwa, lwb)
Cb_a <- N_a*S_a*exploit*weight
return(Cb_a)
}
## spawning biomass per recruit, either in the fished or unfished conditions
get_SBPR <- function(agemat, Linf, k, t0, lwa, lwb, aselex, surv, exploit, R0, unfished, text){
ages <- c(1:input$amax)
SB <- get_SB(ages, agemat, Linf, k, t0, lwa, lwb, aselex, surv, exploit, R0)
SBPR <- sum(SB)/R0
if(text==TRUE & unfished==FALSE) return(paste0("SBPR(fished) = ", round(SBPR,0)))
if(text==TRUE & unfished==TRUE) return(paste0("SBPR(unfished) = ", round(SBPR,0)))
if(text==FALSE) return(round(SBPR,0))
}
## spawning potential ratio
get_SPR <- function(agemat, Linf, k, t0, lwa, lwb, aselex, surv, exploit, R0){
ages <- c(1:input$amax)
SBf <- get_SB(ages, agemat, Linf, k, t0, lwa, lwb, aselex, surv, exploit, R0)
SBPRf <- sum(SBf)/R0
SB0 <- get_SB(ages, agemat, Linf, k, t0, lwa, lwb, aselex, surv, 0, R0)
SBPR0 <- sum(SB0)/R0
return(paste0("SPR = ", round(SBPRf/SBPR0, 3)))
}
## yield per recruit
get_YPR <- function(aselex, surv, exploit, Linf,k,t0,lwa, lwb, R0, text)
{
ages <- c(1:input$amax)
Cb_a <- get_catch(ages, input$aselex, input$surv, input$u, 1, input$Linf, input$k, input$t0, input$d, input$b)
YPR <- sum(Cb_a)/R0
if(text==TRUE) return(paste0("YPR = ", round(YPR,0)))
if(text==FALSE) return(YPR)
}
find_Fref <- function(SBref, agemat, Linf, k, t0, lwa, lwb, aselex, surv, exploit, R0, unfished=FALSE, text=FALSE){
SBcalc <- get_SBPR(input$amat, input$Linf, input$k, input$t0, input$d, input$b, input$aselex, input$surv, exploit, 1, unfished=FALSE, text=FALSE)
SBdiff <- SBcalc - SBref
return(SBdiff)
}
uvec <- seq(0,1, by=0.01)
SBPRvec <- sapply(1:length(uvec), function(x) get_SBPR(input$amat, input$Linf, input$k, input$t0, input$d, input$b, input$aselex, input$surv, uvec[x], 1, unfished=FALSE, text=FALSE))
plot(uvec, SBPRvec, pch=19, cex=1.5, col="tomato3", xlim=c(min(uvec), max(uvec)), ylim=c(0, max(SBPRvec)*1.1),
xlab="Exploitation Rate", ylab="Spawning Biomass Per Recruit", xaxs="i", yaxs="i")
SBref <- (input$Fref/100)*SBPRvec[1] ## target percentage of spawning biomass from unfished state
shiny::runApp()
?segments
shiny::runApp()
0.44/3
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
